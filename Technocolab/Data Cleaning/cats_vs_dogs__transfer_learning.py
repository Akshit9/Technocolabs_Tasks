# -*- coding: utf-8 -*-
"""Cats-vs-dogs__Transfer learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1__WHkLMMXTNZ8OeGHw8U3Hf91B3bFuN4
"""
# import os
# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

import tensorflow as tf
from tensorflow import keras
import os
from matplotlib import pyplot as plt
from tensorflow.keras import layers
from tensorflow.keras import Model

url='https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip'
path_to_zip=tf.keras.utils.get_file('cats_and_dogs.zip',origin=url,extract=True)
PATH=os.path.join(os.path.dirname(path_to_zip),'cats_and_dogs_filtered')

train_dir=os.path.join(PATH,'train')
validation_dir=os.path.join(PATH,'validation')

train_cats_dir=os.path.join(train_dir,'cats')
train_dogs_dir=os.path.join(train_dir,'dogs')

validation_cats_dir=os.path.join(validation_dir,'cats')
validation_dogs_dir=os.path.join(validation_dir,'dogs')

train_cats_fnames=os.listdir(train_cats_dir)
train_dogs_fnames=os.listdir(train_dogs_dir)
validation_cats_fnames=os.listdir(validation_cats_dir)
validation_dogs_fnames=os.listdir(validation_dogs_dir)

print(len(train_cats_fnames))
print(len(train_dogs_fnames))
print(len(validation_cats_fnames))
print(len(validation_dogs_fnames))

pre_trained_model=tf.keras.applications.ResNet50(input_shape=(150,150,3),include_top=False,weights=None)

for layer in pre_trained_model.layers:
  layer.trainable=False

pre_trained_model.summary()

class mycallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self,epoch,logs={}):
    if(logs.get('accuracy')>0.95):
      print('\Reached an accuracy of 95% so cancelling training!')
      self.model.stop_training=True

last_layer=pre_trained_model.get_layer('conv5_block2_add')
print('last layer and outputshape:',last_layer.output_shape)
last_output=last_layer.output

#inputs=tf.keras.Input(shape=(150,150,3))
x=layers.Flatten()(last_output)
x=layers.Dense(512,activation='relu')(x)
x=layers.Dropout(0.2)(x)
x=layers.Dense(1,activation='sigmoid')(x)
model= Model(pre_trained_model.input,x)

model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

model.summary()

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen=ImageDataGenerator(rescale=1/255,rotation_range=40,width_shift_range=0.2,
                                 height_shift_range=0.2,shear_range=0.3,zoom_range=0.2,
                                 fill_mode='nearest',horizontal_flip=True)

validation_datagen=ImageDataGenerator(rescale=1/255)

train_generator=train_datagen.flow_from_directory(train_dir,target_size=(150,150),class_mode='binary',batch_size=20)
validation_generator=validation_datagen.flow_from_directory(validation_dir,target_size=(150,150),class_mode='binary',batch_size=20)

callbacks=mycallback()
history=model.fit(train_generator,validation_data=validation_generator,epochs=100,steps_per_epoch=100,verbose=2,validation_steps=50,callbacks=[callbacks])

acc=history.history['accuracy']
val_acc=history.history['val_accuracy']
loss=history.history['loss']
val_loss=history.history['val_loss']
epochs=range(len(acc))

# from matplotlib import pyplot as plt
# plt.plot(epochs,acc,'b',label='train_accuracy')
# plt.plot(epochs,val_acc,'g',label='val_accuracy')
# plt.title('Accuracy and Val_accuracy')
# plt.legend()

